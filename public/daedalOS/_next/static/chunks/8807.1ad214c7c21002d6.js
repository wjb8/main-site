"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8807],{18807:(e,t,s)=>{s.r(t),s.d(t,{QuickJSAsyncWASMModule:()=>o});var i=s(34451),n=class extends i.QM{async evalCodeAsync(e,t="eval.js",s){let n=+(void 0===s),a=(0,i.zV)(s),o=0;try{o=await this.memory.newHeapCharPointer(e).consume(e=>this.ffi.QTS_Eval_MaybeAsync(this.ctx.value,e.value.ptr,e.value.strlen,t,n,a))}catch(e){throw this.runtime.debugLog("QTS_Eval_MaybeAsync threw",e),e}let r=this.ffi.QTS_ResolveException(this.ctx.value,o);return r?(this.ffi.QTS_FreeValuePointer(this.ctx.value,o),this.fail(this.memory.heapValueHandle(r))):this.success(this.memory.heapValueHandle(o))}newAsyncifiedFunction(e,t){return this.newFunction(e,t)}},a=class extends i.rn{constructor(e){super(e)}newContext(e={}){let t=(0,i.tv)(e.intrinsics),s=new i.iR(this.ffi.QTS_NewContext(this.rt.value,t),void 0,e=>{this.contextMap.delete(e),this.callbacks.deleteContext(e),this.ffi.QTS_FreeContext(e)}),a=new n({module:this.module,ctx:s,ffi:this.ffi,rt:this.rt,ownedLifetimes:[],runtime:this,callbacks:this.callbacks});return this.contextMap.set(s.value,a),a}setModuleLoader(e,t){super.setModuleLoader(e,t)}setMaxStackSize(e){return super.setMaxStackSize(e)}},o=class extends i.r6{constructor(e,t){super(e,t),this.ffi=t,this.module=e}newRuntime(e={}){let t=new i.iR(this.ffi.QTS_NewRuntime(),void 0,e=>{this.callbacks.deleteRuntime(e),this.ffi.QTS_FreeRuntime(e)}),s=new a({module:this.module,ffi:this.ffi,rt:t,callbacks:this.callbacks});return(0,i.od)(s,e),e.moduleLoader&&s.setModuleLoader(e.moduleLoader),s}newContext(e={}){let t=this.newRuntime(),s=e.ownedLifetimes?e.ownedLifetimes.concat([t]):[t],i=t.newContext({...e,ownedLifetimes:s});return t.context=i,i}evalCode(){throw new i.wz("QuickJSWASMModuleAsyncify.evalCode: use evalCodeAsync instead")}evalCodeAsync(e,t){return i.HG.withScopeAsync(async s=>{let n=s.manage(this.newContext());(0,i.nS)(n.runtime,t);let a=await n.evalCodeAsync(e,"eval.js");if(void 0!==t.memoryLimitBytes&&n.runtime.setMemoryLimit(-1),a.error)throw n.dump(s.manage(a.error));return n.dump(s.manage(a.value))})}}}}]);